{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","notification","notificationLevel","listening","recognition","formInput","React","createRef","notificationBlock","onResult","bind","assertThisInitialized","onHandleChange","SpeechRecognition","window","webkitSpeechRecognition","continuous","onresult","e","notify","start","setState","_unused","stop","_unused2","event","results","toConsumableArray","reduce","acc","speech","transcript","_unused3","SpeechSynthesisUtterance","volume","rate","pitch","speechSynthesis","speak","_unused4","target","value","current","select","document","execCommand","level","message","_this2","clear","arguments","length","undefined","setTimeout","_this3","_this$state","react_default","a","createElement","className","alt","src","logo","placeholder","ref","onChange","type","name","disabled","onClick","startListen","onStop","concat","role","onClear","onCopy","onSpeakOut","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"0PA0JeA,cAnJb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,aAAc,GACdC,kBAAmB,OACnBC,WAAW,GAIbX,EAAKY,YAAc,KAGnBZ,EAAKa,UAAYC,IAAMC,YACvBf,EAAKgB,kBAAoBF,IAAMC,YAG/Bf,EAAKiB,SAAWjB,EAAKiB,SAASC,KAAdjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAChBA,EAAKoB,eAAiBpB,EAAKoB,eAAeF,KAApBjB,OAAAkB,EAAA,EAAAlB,CAAAD,IAlBNA,mFAsBhB,IASE,IAAMqB,EAAoBC,OAAOD,mBAAqBC,OAAOC,wBAC7DpB,KAAKS,YAAc,IAAIS,EACvBlB,KAAKS,YAAYY,YAAa,EAC9BrB,KAAKS,YAAYa,SAAWtB,KAAKc,SAEnC,MAAMS,GACJvB,KAAKwB,OAAO,SAAU,kEAAkE,0CAM1F,IACExB,KAAKS,YAAYgB,QACjBzB,KAAK0B,SAAS,CAAElB,WAAW,IAC3BR,KAAKwB,OAAO,OAAQ,qBACpB,MAAAG,GACA3B,KAAKwB,OAAO,SAAU,kEAAkE,qCAM1F,IACIxB,KAAKS,YAAYmB,OACjB5B,KAAK0B,SAAS,CAAElB,WAAW,IAC3BR,KAAKwB,OAAO,OAAQ,qBACtB,MAAAK,GACE7B,KAAKwB,OAAO,SAAU,8DAKnBM,GACP,IACMzB,GADUyB,GAASA,EAAMC,QAAfjC,OAAAkC,EAAA,EAAAlC,CAA8BgC,EAAMC,SAAY,IAC3CE,OAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAM,IAAMC,EAAO,GAAGC,YAAY,IAC/EpC,KAAK0B,SAAS,CAAErB,KAAMA,yCAMtB,IACEL,KAAKS,YAAYmB,OACjB5B,KAAK0B,SAAS,CAAElB,WAAW,IAC3B,MAAA6B,GACArC,KAAKwB,OAAO,SAAU,6CAIxB,IACE,IAAMW,EAAS,IAAIG,yBACnBH,EAAO9B,KAAOL,KAAKI,MAAMC,KAC1B8B,EAAOI,OAAS,EAChBJ,EAAOK,KAAO,EACdL,EAAOM,MAAQ,EACdtB,OAAOuB,gBAAgBC,MAAMR,GAC7B,MAAAS,GACA5C,KAAKwB,OAAO,SAAU,+DAIXD,GACbvB,KAAK0B,SAAS,CAAErB,KAAMkB,EAAEsB,OAAOC,yCAI/B9C,KAAKU,UAAUqC,QAAQC,SACvBC,SAASC,YAAY,QACrBlD,KAAKwB,OAAO,OAAQ,iDAIpBxB,KAAK0B,SAAS,CAAErB,KAAM,oCAGjB8C,EAAOC,GAAuB,IAAAC,EAAArD,KAAdsD,IAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACnCvD,KAAK0B,SAAS,CAAEpB,aAAc8C,EAAS7C,kBAAmB4C,IACvDG,GACDI,WAAW,WACTL,EAAK3B,SAAS,CAAEpB,aAAc,GAAIC,kBAAmB,UACpD,sCAIE,IAAAoD,EAAA3D,KAAA4D,EACsD5D,KAAKI,MAA1DC,EADDuD,EACCvD,KAAMC,EADPsD,EACOtD,aAAcC,EADrBqD,EACqBrD,kBAAmBC,EADxCoD,EACwCpD,UAC/C,OACEqD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,GAAGD,UAAU,aAAaE,IAAKC,MAA5C,sBAA0EN,EAAAC,EAAAC,cAAA,WAC1EF,EAAAC,EAAAC,cAAA,SAAOK,YAAY,2CAA2CC,IAAKrE,KAAKU,UAAW4D,SAAUtE,KAAKiB,eAAgBsD,KAAK,OAAOzB,MAAOzC,EAAM2D,UAAU,eAAeQ,KAAK,WAF3K,IAEuLX,EAAAC,EAAAC,cAAA,WACrLF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,UAAQU,SAAUjE,EAAWwD,UAAU,6BAA6BU,QAAS,kBAAMf,EAAKgB,eAAeJ,KAAK,UAA5G,UACAV,EAAAC,EAAAC,cAAA,UAAQU,UAAWjE,EAAWwD,UAAU,+BAA+BU,QAAS,kBAAMf,EAAKiB,UAAUL,KAAK,UAA1G,UAGJV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZ1D,GAAgBuD,EAAAC,EAAAC,cAAA,OAAKM,IAAKrE,KAAKa,kBAAmBmD,UAAS,eAAAa,OAAiBtE,GAAqBuE,KAAK,SACnGxE,IAGNuD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,UAAQU,SAAUpE,EAAKmD,QAAU,EAAGQ,UAAU,4BAA4BU,QAAS,kBAAMf,EAAKoB,WAAWR,KAAK,UAA9G,SACAV,EAAAC,EAAAC,cAAA,UAAQU,SAAUpE,EAAKmD,QAAU,EAAGQ,UAAU,4BAA4BU,QAAS,kBAAMf,EAAKqB,UAAUT,KAAK,UAA7G,QACAV,EAAAC,EAAAC,cAAA,UAAQU,SAAUpE,EAAKmD,QAAU,EAAGQ,UAAU,gCAAgCU,QAAS,kBAAMf,EAAKsB,cAAcV,KAAK,UAArH,uBA5II5D,IAAMuE,WCOJC,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASxC,SAASyC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f2385c21.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport logo from './logo.png'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      text: '',\n      notification: '',\n      notificationLevel: 'info',\n      listening: false\n    }\n\n    // Globally set recognition object with initial value as null\n    this.recognition = null\n\n    // Create Reference for required elements\n    this.formInput = React.createRef()\n    this.notificationBlock = React.createRef()\n\n    // Bind this for required function\n    this.onResult = this.onResult.bind(this)\n    this.onHandleChange = this.onHandleChange.bind(this)\n  }\n\n  componentDidMount() {\n    try {\n      /**\n      * Get the SpeechRecognition || webkitSpeechRecognition API & initiate it\n      *\n      * NOTE: As of now, SpeechRecognition is only working on Google chrome. See\n      * more details on below link\n      * https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API\n      *\n      */\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      this.recognition = new SpeechRecognition();\n      this.recognition.continuous = true;\n      this.recognition.onresult = this.onResult\n    }\n    catch(e) {\n      this.notify('danger', 'Unable to start SpeechRecognition. Please try in Google Chrome', false)\n    }\n  }\n\n  // Initiate the voice recognition\n  startListen() {\n    try {\n      this.recognition.start()\n      this.setState({ listening: true })\n      this.notify('info', 'Started Listening')\n    } catch {\n      this.notify('danger', 'Unable to start SpeechRecognition. Please try in Google Chrome', false)\n    }\n  }\n\n  // Stop the voice recognition\n  onStop() {\n    try {\n        this.recognition.stop()\n        this.setState({ listening: false })\n        this.notify('info', 'Stopped Listening')\n    } catch {\n        this.notify('danger', 'Unable to stop Listening')\n    }\n  }\n\n  // Capture & store the spoken sentence/words\n  onResult(event){\n    const results = event && event.results ? [ ...event.results ] : []\n    const text = results.reduce((acc, speech) => acc + ' ' + speech[0].transcript, '')\n    this.setState({ text: text })\n  }\n\n  //\n  onSpeakOut() {\n    // Stop the listening\n    try {\n      this.recognition.stop()\n      this.setState({ listening: false })\n    } catch {\n      this.notify('danger', 'Unable to listening and speakout the text')\n    }\n\n    // Speakout the text\n    try {\n      const speech = new SpeechSynthesisUtterance()\n      speech.text = this.state.text\n    \tspeech.volume = 1\n    \tspeech.rate = 1\n    \tspeech.pitch = 1\n      window.speechSynthesis.speak(speech);\n    } catch {\n      this.notify('danger', 'Unable to speak out')\n    }\n  }\n\n  onHandleChange(e){\n    this.setState({ text: e.target.value })\n  }\n\n  onCopy() {\n    this.formInput.current.select()\n    document.execCommand('copy')\n    this.notify('info', 'Text Copied')\n  }\n\n  onClear() {\n    this.setState({ text: ''})\n  }\n\n  notify(level, message, clear = true) {\n    this.setState({ notification: message, notificationLevel: level })\n    if(clear){\n      setTimeout(() => {\n        this.setState({ notification: '', notificationLevel: 'info' })\n      }, 5000)\n    }\n  }\n\n  render() {\n    const { text, notification, notificationLevel, listening } = this.state\n    return (\n      <div className='container app-main'>\n        <h1><img alt='' className='brand-logo' src={logo}/>Speech Recognition</h1><br/>\n        <input placeholder='Start speaking by pressing Listen button' ref={this.formInput} onChange={this.onHandleChange} type='text' value={text} className='form-control' name='inputs' /> <br/>\n        <div className='row'>\n          <div className='col-md-2'>\n            <div className='form-group actionBtns'>\n              <button disabled={listening} className='btn btn-primary float-left' onClick={() => this.startListen()} type='button'>Listen</button>\n              <button disabled={!listening} className='btn btn-secondary float-left' onClick={() => this.onStop()} type='button'>Stop</button>\n            </div>\n          </div>\n          <div className='col-md-7'>\n            {notification && <div ref={this.notificationBlock} className={`alert alert-${notificationLevel}`} role=\"alert\">\n              { notification }\n            </div>}\n          </div>\n          <div className='col-md-3'>\n            <div className='form-group actionBtns'>\n              <button disabled={text.length <= 0} className='btn btn-light float-right' onClick={() => this.onClear()} type='button'>Clear</button>\n              <button disabled={text.length <= 0} className='btn btn-light float-right' onClick={() => this.onCopy()} type='button'>Copy</button>\n              <button disabled={text.length <= 0} className='btn btn-secondary float-right' onClick={() => this.onSpeakOut()} type='button'>Speakout</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f3661b17.png\";"],"sourceRoot":""}